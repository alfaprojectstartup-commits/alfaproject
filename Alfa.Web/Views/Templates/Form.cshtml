@model Alfa.Web.Models.FaseModeloFormViewModel
@{
    var isEdit = Model?.Id.HasValue ?? false;
    ViewData["Title"] = isEdit ? "Editar fase" : "Nova fase";
}

<nav aria-label="breadcrumb" class="mb-3 small">
    <ol class="breadcrumb mb-0">
        <li class="breadcrumb-item"><a asp-controller="Processos" asp-action="Index">Processos</a></li>
        <li class="breadcrumb-item"><a asp-controller="Templates" asp-action="Index">Templates</a></li>
        <li class="breadcrumb-item active" aria-current="page">@(isEdit ? "Editar" : "Novo")</li>
    </ol>
</nav>

<div class="d-flex justify-content-between align-items-center mb-4 flex-wrap gap-3">
    <div>
        <h1 class="h4 mb-1">@(isEdit ? "Editar fase" : "Cadastrar nova fase")</h1>
        <p class="text-muted mb-0">Configure páginas, campos e opções que serão utilizados na criação de novos processos.</p>
    </div>
</div>

<form asp-action="@(isEdit ? "Editar" : "Novo")" asp-route-id="@(isEdit ? Model?.Id : (int?)null)" method="post" id="template-form">
    @Html.AntiForgeryToken()
    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

    <div class="card mb-4 shadow-sm">
        <div class="card-body">
            <div class="row g-3">
                <div class="col-md-6">
                    <label asp-for="Titulo" class="form-label"></label>
                    <input asp-for="Titulo" class="form-control" />
                    <span asp-validation-for="Titulo" class="text-danger"></span>
                </div>
                <div class="col-md-3">
                    <label asp-for="Ordem" class="form-label"></label>
                    <input asp-for="Ordem" class="form-control" type="number" min="0" />
                    <span asp-validation-for="Ordem" class="text-danger"></span>
                </div>
                <div class="col-md-3 d-flex align-items-center">
                    <div class="form-check mt-4">
                        <input class="form-check-input" asp-for="Ativo" />
                        <label class="form-check-label" asp-for="Ativo"></label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="mb-4">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h2 class="h5 mb-0">Páginas da fase</h2>
            <button type="button" class="btn btn-outline-primary btn-sm" id="adicionar-pagina">
                Adicionar página
            </button>
        </div>
        <div id="paginas-container" class="d-grid gap-3">
            @if (Model?.Paginas != null)
            {
                for (var i = 0; i < Model.Paginas.Count; i++)
                {
                    var pagina = Model.Paginas[i];
                    <div class="card shadow-sm pagina-item" data-page-index="@i">
                        <div class="card-header bg-white d-flex justify-content-between align-items-center">
                            <div>
                                <span class="fw-semibold">Página</span>
                                <span class="text-muted small ms-2">Ordem exibida conforme preenchido</span>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-danger" data-remover-pagina>Remover</button>
                        </div>
                        <div class="card-body">
                            <div class="row g-3 mb-3">
                                <div class="col-md-8">
                                    <label class="form-label">Título</label>
                                    <input class="form-control" data-page-prop="Titulo" name="Paginas[@i].Titulo" value="@pagina.Titulo" />
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Ordem</label>
                                    <input class="form-control" data-page-prop="Ordem" name="Paginas[@i].Ordem" type="number" min="0" value="@pagina.Ordem" />
                                </div>
                            </div>

                            <div class="mb-3 campos-wrapper">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h3 class="h6 mb-0">Campos</h3>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" data-adicionar-campo>Adicionar campo</button>
                                </div>
                                <div class="d-grid gap-3 campos-container">
                                    @if (pagina.Campos != null)
                                    {
                                        for (var j = 0; j < pagina.Campos.Count; j++)
                                        {
                                            var campo = pagina.Campos[j];
                                            <div class="border rounded p-3 campo-item" data-field-index="@j">
                                                <div class="d-flex justify-content-between align-items-start mb-2">
                                                    <div>
                                                        <span class="fw-semibold">Campo</span>
                                                    </div>
                                                    <button type="button" class="btn btn-sm btn-outline-danger" data-remover-campo>Remover</button>
                                                </div>
                                                <div class="row g-3">
                                                    <div class="col-md-4">
                                                        <label class="form-label">Nome interno</label>
                                                        <input class="form-control" data-field-prop="NomeCampo" name="Paginas[@i].Campos[@j].NomeCampo" value="@campo.NomeCampo" />
                                                    </div>
                                                    <div class="col-md-4">
                                                        <label class="form-label">Rótulo</label>
                                                        <input class="form-control" data-field-prop="Rotulo" name="Paginas[@i].Campos[@j].Rotulo" value="@campo.Rotulo" />
                                                    </div>
                                                    <div class="col-md-4">
                                                        <label class="form-label">Tipo</label>
                                                        <input class="form-control" data-field-prop="Tipo" name="Paginas[@i].Campos[@j].Tipo" value="@campo.Tipo" />
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="form-label">Ordem</label>
                                                        <input class="form-control" data-field-prop="Ordem" name="Paginas[@i].Campos[@j].Ordem" type="number" min="0" value="@campo.Ordem" />
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="form-label">Placeholder</label>
                                                        <input class="form-control" data-field-prop="Placeholder" name="Paginas[@i].Campos[@j].Placeholder" value="@campo.Placeholder" />
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="form-label">Máscara</label>
                                                        <input class="form-control" data-field-prop="Mascara" name="Paginas[@i].Campos[@j].Mascara" value="@campo.Mascara" />
                                                    </div>
                                                    <div class="col-md-3">
                                                        <label class="form-label">Ajuda</label>
                                                        <input class="form-control" data-field-prop="Ajuda" name="Paginas[@i].Campos[@j].Ajuda" value="@campo.Ajuda" />
                                                    </div>
                                                    <div class="col-md-3 d-flex align-items-center">
                                                        <div class="form-check mt-4">
                                                            <input type="hidden" data-field-prop="Obrigatorio" name="Paginas[@i].Campos[@j].Obrigatorio" value="false" />
                                                            <input class="form-check-input" type="checkbox" data-field-prop="Obrigatorio" name="Paginas[@i].Campos[@j].Obrigatorio" value="true" @(campo.Obrigatorio ? "checked" : string.Empty) />
                                                            <label class="form-check-label">Obrigatório</label>
                                                        </div>
                                                    </div>
                                                </div>

                                                <div class="mt-3 opcoes-wrapper">
                                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                                        <span class="fw-semibold small">Opções</span>
                                                        <button type="button" class="btn btn-outline-secondary btn-sm" data-adicionar-opcao>Adicionar opção</button>
                                                    </div>
                                                    <div class="d-grid gap-2 opcoes-container">
                                                        @if (campo.Opcoes != null)
                                                        {
                                                            for (var k = 0; k < campo.Opcoes.Count; k++)
                                                            {
                                                                var opcao = campo.Opcoes[k];
                                                                <div class="border rounded p-2 opcao-item" data-option-index="@k">
                                                                    <div class="row g-2 align-items-end">
                                                                        <div class="col-md-5">
                                                                            <label class="form-label form-label-sm">Texto</label>
                                                                            <input class="form-control form-control-sm" data-option-prop="Texto" name="Paginas[@i].Campos[@j].Opcoes[@k].Texto" value="@opcao.Texto" />
                                                                        </div>
                                                                        <div class="col-md-3">
                                                                            <label class="form-label form-label-sm">Valor</label>
                                                                            <input class="form-control form-control-sm" data-option-prop="Valor" name="Paginas[@i].Campos[@j].Opcoes[@k].Valor" value="@opcao.Valor" />
                                                                        </div>
                                                                        <div class="col-md-2">
                                                                            <label class="form-label form-label-sm">Ordem</label>
                                                                            <input class="form-control form-control-sm" data-option-prop="Ordem" name="Paginas[@i].Campos[@j].Opcoes[@k].Ordem" type="number" min="0" value="@opcao.Ordem" />
                                                                        </div>
                                                                        <div class="col-md-2">
                                                                            <label class="form-label form-label-sm">Ativa</label>
                                                                            <div class="form-check">
                                                                                <input type="hidden" data-option-prop="Ativo" name="Paginas[@i].Campos[@j].Opcoes[@k].Ativo" value="false" />
                                                                                <input class="form-check-input" type="checkbox" data-option-prop="Ativo" name="Paginas[@i].Campos[@j].Opcoes[@k].Ativo" value="true" @(opcao.Ativo ? "checked" : string.Empty) />
                                                                            </div>
                                                                        </div>
                                                                        <div class="col-auto">
                                                                            <button type="button" class="btn btn-sm btn-outline-danger" data-remover-opcao>Remover</button>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            }
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        <div class="text-muted small">Inclua pelo menos uma página com seus respectivos campos para que a fase esteja pronta para uso.</div>
    </div>

    <div class="d-flex justify-content-between align-items-center">
        <a asp-action="Index" class="btn btn-link">Cancelar</a>
        <button type="submit" class="btn btn-primary">@(isEdit ? "Salvar alterações" : "Criar fase")</button>
    </div>
</form>

<template id="pagina-template">
    <div class="card shadow-sm pagina-item">
        <div class="card-header bg-white d-flex justify-content-between align-items-center">
            <div>
                <span class="fw-semibold">Página</span>
                <span class="text-muted small ms-2">Ordem exibida conforme preenchido</span>
            </div>
            <button type="button" class="btn btn-sm btn-outline-danger" data-remover-pagina>Remover</button>
        </div>
        <div class="card-body">
            <div class="row g-3 mb-3">
                <div class="col-md-8">
                    <label class="form-label">Título</label>
                    <input class="form-control" data-page-prop="Titulo" />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Ordem</label>
                    <input class="form-control" data-page-prop="Ordem" type="number" min="0" value="0" />
                </div>
            </div>
            <div class="mb-3 campos-wrapper">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h3 class="h6 mb-0">Campos</h3>
                    <button type="button" class="btn btn-outline-secondary btn-sm" data-adicionar-campo>Adicionar campo</button>
                </div>
                <div class="d-grid gap-3 campos-container"></div>
            </div>
        </div>
    </div>
</template>

<template id="campo-template">
    <div class="border rounded p-3 campo-item">
        <div class="d-flex justify-content-between align-items-start mb-2">
            <div>
                <span class="fw-semibold">Campo</span>
            </div>
            <button type="button" class="btn btn-sm btn-outline-danger" data-remover-campo>Remover</button>
        </div>
        <div class="row g-3">
            <div class="col-md-4">
                <label class="form-label">Nome interno</label>
                <input class="form-control" data-field-prop="NomeCampo" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Rótulo</label>
                <input class="form-control" data-field-prop="Rotulo" />
            </div>
            <div class="col-md-4">
                <label class="form-label">Tipo</label>
                <input class="form-control" data-field-prop="Tipo" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Ordem</label>
                <input class="form-control" data-field-prop="Ordem" type="number" min="0" value="0" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Placeholder</label>
                <input class="form-control" data-field-prop="Placeholder" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Máscara</label>
                <input class="form-control" data-field-prop="Mascara" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Ajuda</label>
                <input class="form-control" data-field-prop="Ajuda" />
            </div>
            <div class="col-md-3 d-flex align-items-center">
                <div class="form-check mt-4">
                    <input type="hidden" data-field-prop="Obrigatorio" value="false" />
                    <input class="form-check-input" type="checkbox" data-field-prop="Obrigatorio" value="true" />
                    <label class="form-check-label">Obrigatório</label>
                </div>
            </div>
        </div>
        <div class="mt-3 opcoes-wrapper">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <span class="fw-semibold small">Opções</span>
                <button type="button" class="btn btn-outline-secondary btn-sm" data-adicionar-opcao>Adicionar opção</button>
            </div>
            <div class="d-grid gap-2 opcoes-container"></div>
        </div>
    </div>
</template>

<template id="opcao-template">
    <div class="border rounded p-2 opcao-item">
        <div class="row g-2 align-items-end">
            <div class="col-md-5">
                <label class="form-label form-label-sm">Texto</label>
                <input class="form-control form-control-sm" data-option-prop="Texto" />
            </div>
            <div class="col-md-3">
                <label class="form-label form-label-sm">Valor</label>
                <input class="form-control form-control-sm" data-option-prop="Valor" />
            </div>
            <div class="col-md-2">
                <label class="form-label form-label-sm">Ordem</label>
                <input class="form-control form-control-sm" data-option-prop="Ordem" type="number" min="0" value="0" />
            </div>
            <div class="col-md-2">
                <label class="form-label form-label-sm">Ativa</label>
                <div class="form-check">
                    <input type="hidden" data-option-prop="Ativo" value="false" />
                    <input class="form-check-input" type="checkbox" data-option-prop="Ativo" value="true" checked />
                </div>
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-sm btn-outline-danger" data-remover-opcao>Remover</button>
            </div>
        </div>
    </div>
</template>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            const paginasContainer = document.getElementById('paginas-container');
            const addPaginaBtn = document.getElementById('adicionar-pagina');
            const paginaTemplate = document.getElementById('pagina-template');
            const campoTemplate = document.getElementById('campo-template');
            const opcaoTemplate = document.getElementById('opcao-template');
            const form = document.getElementById('template-form');

            function cloneTemplate(template) {
                return template.content.firstElementChild.cloneNode(true);
            }

            function adicionarPagina(dados) {
                const paginaEl = cloneTemplate(paginaTemplate);
                const camposContainer = paginaEl.querySelector('.campos-container');

                paginaEl.querySelectorAll('[data-page-prop="Titulo"]').forEach(input => {
                    input.value = dados?.Titulo ?? '';
                });
                paginaEl.querySelectorAll('[data-page-prop="Ordem"]').forEach(input => {
                    input.value = dados?.Ordem ?? 0;
                });

                (dados?.Campos ?? []).forEach(campo => {
                    const campoEl = adicionarCampo(paginaEl, campo);
                    camposContainer.appendChild(campoEl);
                });

                paginasContainer.appendChild(paginaEl);
                inicializarPagina(paginaEl);
                reindexar();
            }

            function adicionarCampo(paginaEl, dados) {
                const campoEl = cloneTemplate(campoTemplate);
                const opcoesContainer = campoEl.querySelector('.opcoes-container');

                campoEl.querySelector('[data-field-prop="NomeCampo"]').value = dados?.NomeCampo ?? '';
                campoEl.querySelector('[data-field-prop="Rotulo"]').value = dados?.Rotulo ?? '';
                campoEl.querySelector('[data-field-prop="Tipo"]').value = dados?.Tipo ?? '';
                campoEl.querySelector('[data-field-prop="Ordem"]').value = dados?.Ordem ?? 0;
                campoEl.querySelector('[data-field-prop="Placeholder"]').value = dados?.Placeholder ?? '';
                campoEl.querySelector('[data-field-prop="Mascara"]').value = dados?.Mascara ?? '';
                campoEl.querySelector('[data-field-prop="Ajuda"]').value = dados?.Ajuda ?? '';
                const obrigatorioHidden = campoEl.querySelector('input[type="hidden"][data-field-prop="Obrigatorio"]');
                const obrigatorioCheck = campoEl.querySelector('input[type="checkbox"][data-field-prop="Obrigatorio"]');
                const obrigatorio = dados?.Obrigatorio ?? false;
                obrigatorioHidden.value = obrigatorio ? 'true' : 'false';
                obrigatorioCheck.checked = obrigatorio;

                (dados?.Opcoes ?? []).forEach(opcao => {
                    const opcaoEl = adicionarOpcao(campoEl, opcao);
                    opcoesContainer.appendChild(opcaoEl);
                });

                inicializarCampo(campoEl);
                return campoEl;
            }

            function adicionarOpcao(campoEl, dados) {
                const opcaoEl = cloneTemplate(opcaoTemplate);
                opcaoEl.querySelector('[data-option-prop="Texto"]').value = dados?.Texto ?? '';
                opcaoEl.querySelector('[data-option-prop="Valor"]').value = dados?.Valor ?? '';
                opcaoEl.querySelector('[data-option-prop="Ordem"]').value = dados?.Ordem ?? 0;
                const ativoHidden = opcaoEl.querySelector('input[type="hidden"][data-option-prop="Ativo"]');
                const ativoCheck = opcaoEl.querySelector('input[type="checkbox"][data-option-prop="Ativo"]');
                const ativo = dados?.Ativo ?? true;
                ativoHidden.value = ativo ? 'true' : 'false';
                ativoCheck.checked = ativo;
                inicializarOpcao(opcaoEl);
                return opcaoEl;
            }

            function inicializarPagina(paginaEl) {
                paginaEl.querySelector('[data-adicionar-campo]').addEventListener('click', () => {
                    const campoEl = adicionarCampo(paginaEl);
                    paginaEl.querySelector('.campos-container').appendChild(campoEl);
                    reindexar();
                });

                paginaEl.querySelector('[data-remover-pagina]').addEventListener('click', () => {
                    paginaEl.remove();
                    reindexar();
                });

                paginaEl.querySelectorAll('.campo-item').forEach(campoEl => inicializarCampo(campoEl));
            }

            function inicializarCampo(campoEl) {
                campoEl.querySelector('[data-adicionar-opcao]').addEventListener('click', () => {
                    const opcaoEl = adicionarOpcao(campoEl);
                    campoEl.querySelector('.opcoes-container').appendChild(opcaoEl);
                    reindexar();
                });

                campoEl.querySelector('[data-remover-campo]').addEventListener('click', () => {
                    campoEl.remove();
                    reindexar();
                });

                campoEl.querySelectorAll('.opcao-item').forEach(opcaoEl => inicializarOpcao(opcaoEl));

                const obrigatorioCheck = campoEl.querySelector('input[type="checkbox"][data-field-prop="Obrigatorio"]');
                const obrigatorioHidden = campoEl.querySelector('input[type="hidden"][data-field-prop="Obrigatorio"]');
                obrigatorioCheck.addEventListener('change', () => {
                    obrigatorioHidden.value = obrigatorioCheck.checked ? 'true' : 'false';
                });
            }

            function inicializarOpcao(opcaoEl) {
                const ativoCheck = opcaoEl.querySelector('input[type="checkbox"][data-option-prop="Ativo"]');
                const ativoHidden = opcaoEl.querySelector('input[type="hidden"][data-option-prop="Ativo"]');
                ativoCheck.addEventListener('change', () => {
                    ativoHidden.value = ativoCheck.checked ? 'true' : 'false';
                });

                opcaoEl.querySelector('[data-remover-opcao]').addEventListener('click', () => {
                    opcaoEl.remove();
                    reindexar();
                });
            }

            function reindexar() {
                const paginaEls = paginasContainer.querySelectorAll('.pagina-item');
                paginaEls.forEach((paginaEl, pIndex) => {
                    paginaEl.dataset.pageIndex = pIndex;
                    paginaEl.querySelectorAll('[data-page-prop]').forEach(input => {
                        const prop = input.getAttribute('data-page-prop');
                        input.name = `Paginas[${pIndex}].${prop}`;
                    });

                    const campoEls = paginaEl.querySelectorAll('.campo-item');
                    campoEls.forEach((campoEl, cIndex) => {
                        campoEl.dataset.fieldIndex = cIndex;
                        campoEl.querySelectorAll('[data-field-prop]').forEach(input => {
                            const prop = input.getAttribute('data-field-prop');
                            input.name = `Paginas[${pIndex}].Campos[${cIndex}].${prop}`;
                        });

                        const opcaoEls = campoEl.querySelectorAll('.opcao-item');
                        opcaoEls.forEach((opcaoEl, oIndex) => {
                            opcaoEl.dataset.optionIndex = oIndex;
                            opcaoEl.querySelectorAll('[data-option-prop]').forEach(input => {
                                const prop = input.getAttribute('data-option-prop');
                                input.name = `Paginas[${pIndex}].Campos[${cIndex}].Opcoes[${oIndex}].${prop}`;
                            });
                        });
                    });
                });
            }

            addPaginaBtn?.addEventListener('click', () => {
                adicionarPagina();
            });

            form?.addEventListener('submit', () => {
                reindexar();
            });

            if (paginasContainer.childElementCount === 0) {
                // Começar com uma página vazia para facilitar o preenchimento
                adicionarPagina();
            } else {
                // Reaplicar scripts para itens renderizados pelo servidor
                paginasContainer.querySelectorAll('.pagina-item').forEach(paginaEl => {
                    inicializarPagina(paginaEl);
                });
                reindexar();
            }
        })();
    </script>
}
